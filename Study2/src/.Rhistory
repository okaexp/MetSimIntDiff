str(dat_participant_mean)
#データの整形：棒グラフ用
#SDは参加者平均から算出
dat_participant_mean <- dat_valid_long %>%
dplyr::group_by(CWID, MetSim) %>%
dplyr::summarise(Average = mean(Value)) %>%
dplyr::mutate(MetSim = as.factor(MetSim))
head(dat_participant_mean)
#棒グラフを書く
dat_participant_graph <- dat_participant_mean %>%
dplyr::group_by(MetSim) %>%
dplyr::summarise(Mean = mean(Average), SD = sd(Average))
dat_participant_graph
#Mr.Unadonを参考にしながら、棒グラフを書く
#https://mrunadon.github.io/ThesisPlot/
#quartz(type = "pdf", file = "./BarPlotAptnessRating_v1.1.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g<-ggplot(dat_participant_graph, aes(y=Mean, x=MetSim)) #irisOderedのデータフレームを使う。y軸とｘ軸の変数を指定。
g <- g + geom_bar(position = "dodge", stat = "identity")#平均値を表したbarの準備
g <- g + geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = .2, position = position_dodge(.9))#標準誤差
g <- g + scale_y_continuous(name = "Mean connotation rating", breaks = seq(0, 6, length=7), limits = c(0, 6))
#2019年6月8日 修正
g <- g + scale_x_discrete(name = "Type of features",
labels = c("S" = "Simile unique features", "M" = "Metaphor unique features"),
limits=c("S", "M"))
plot(g)
#Mr.Unadonを参考にしながら、棒グラフを書く
#https://mrunadon.github.io/ThesisPlot/
#quartz(type = "pdf", file = "./BarPlotAptnessRating_v1.1.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g<-ggplot(dat_participant_graph, aes(y=Mean, x=MetSim)) #irisOderedのデータフレームを使う。y軸とｘ軸の変数を指定。
g <- g + geom_bar(position = "dodge", stat = "identity")#平均値を表したbarの準備
g <- g + geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = .2, position = position_dodge(.9))#標準誤差
g <- g + scale_y_continuous(name = "Mean connotation rating", breaks = seq(1, 5, length=5), limits = c(0, 6))
#2019年6月8日 修正
g <- g + scale_x_discrete(name = "Type of features",
labels = c("S" = "Simile unique features", "M" = "Metaphor unique features"),
limits=c("S", "M"))
plot(g)
#Mr.Unadonを参考にしながら、棒グラフを書く
#https://mrunadon.github.io/ThesisPlot/
#quartz(type = "pdf", file = "./BarPlotAptnessRating_v1.1.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g<-ggplot(dat_participant_graph, aes(y=Mean, x=MetSim)) #irisOderedのデータフレームを使う。y軸とｘ軸の変数を指定。
g <- g + geom_bar(position = "dodge", stat = "identity")#平均値を表したbarの準備
g <- g + geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = .2, position = position_dodge(.9))#標準誤差
g <- g + scale_y_continuous(name = "Mean connotation rating", breaks = seq(0, 5, length=6), limits = c(0, 6))
#2019年6月8日 修正
g <- g + scale_x_discrete(name = "Type of features",
labels = c("S" = "Simile unique features", "M" = "Metaphor unique features"),
limits=c("S", "M"))
plot(g)
#Mr.Unadonを参考にしながら、棒グラフを書く
#https://mrunadon.github.io/ThesisPlot/
#quartz(type = "pdf", file = "./BarPlotAptnessRating_v1.1.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g<-ggplot(dat_participant_graph, aes(y=Mean, x=MetSim)) #irisOderedのデータフレームを使う。y軸とｘ軸の変数を指定。
g <- g + geom_bar(position = "dodge", stat = "identity")#平均値を表したbarの準備
g <- g + geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = .2, position = position_dodge(.9))#標準誤差
g <- g + scale_y_continuous(name = "Mean connotation rating", breaks = seq(0, 5, length=6), limits = c(0, 5))
#2019年6月8日 修正
g <- g + scale_x_discrete(name = "Type of features",
labels = c("S" = "Simile unique features", "M" = "Metaphor unique features"),
limits=c("S", "M"))
plot(g)
quartz(type = "pdf", file = "../result/BarPlotConnotationRating_v1.0.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g<-ggplot(dat_participant_graph, aes(y=Mean, x=MetSim)) #irisOderedのデータフレームを使う。y軸とｘ軸の変数を指定。
g <- g + geom_bar(position = "dodge", stat = "identity")#平均値を表したbarの準備
g <- g + geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = .2, position = position_dodge(.9))#標準誤差
g <- g + scale_y_continuous(name = "Mean connotation rating", breaks = seq(0, 5, length=6), limits = c(0, 5))
#2019年6月8日 修正
g <- g + scale_x_discrete(name = "Type of features",
labels = c("S" = "Simile unique features", "M" = "Metaphor unique features"),
limits=c("S", "M"))
plot(g)
dev.off()
head(dat_valid_long)
#ランダム相関を計算しないモデル
#論文で報告するのはこっち
res_lmer_dat <- lmer(formula = Value ~ MetSim + (1 + MetSim|CWID) + (1 + Condition|QID),
data = dat_valid_long)
#ランダム相関を計算しないモデル
#論文で報告するのはこっち
res_lmer_dat <- lmer(formula = Value ~ MetSim + (1 + MetSim|CWID) + (1 + MetSim + FeatID|QID),
data = dat_valid_long)
#ランダム相関を計算しないモデル
#論文で報告するのはこっち
res_lmer_dat <- lmer(formula = Value ~ MetSim + (1 + MetSim + FeatID|CWID) + (1 + MetSim|QID),
data = dat_valid_long)
#ランダム相関を計算しないモデル
#論文で報告するのはこっち
res_lmer_dat <- lmer(formula = Value ~ MetSim + (1 + MetSim|CWID) + (1 + MetSim|QID),
data = dat_valid_long)
summary(res_lmer_dat)
dat_participant_graph
dat_age
dat_sex
#最終更新：2024年3月3日 16時12分
# /Users/Ryunosuke/Dropbox/比喩関連/基盤数/適切さにおける顕著性_その2/code/実験1/調査結果/AptnessJudgementTask_analysis.Rを参考にした
library(tidyr)
library(dplyr)
library(lme4)
library(lmerTest)
library(ggplot2)
# #念の為anovakunも使う
# source("./anovakun_482.txt")
#ローデータの読み込み ----
raw_dat <- read.csv("../data/raw_dat/20240301_MetSimDiff_Study2_20240301_1436.csv")
#必要データの読み込み ----
dat <- raw_dat %>%
dplyr::slice(3:nrow(raw_dat)) %>%#データの読み込み
dplyr::select(Duration..in.seconds., starts_with("D_"), starts_with("P_"), starts_with("Q")) %>%#必要列の抽出
dplyr::select(-P_ID) %>%
dplyr::mutate(ElapsedTime = as.integer(Duration..in.seconds.),
Sex = as.factor(D_Sex),
Age = as.integer(D_Age),
Academic = as.integer(D_AcademicDegree.),
CWID = as.factor(D_CWID.)) %>%
dplyr::select(-Duration..in.seconds., -D_Sex, -D_Age, -D_AcademicDegree., -D_CWID.) %>%
dplyr::mutate_at(.vars = vars(starts_with("Q")), .funs = as.integer) %>%#本番の回答はまとめて
dplyr::mutate_at(.vars = vars(starts_with("P_")), .funs = as.integer)#練習の回答はまとめて
#確認質問に正しく回答している人だけを抽出 -> 9名ドロップ----
#P_Pra1_1(犬 - 吠える): 1
#P_Pra1_2(犬 - 忠実だ): 2
#P_Pra2_1(壁 - 高い): 1
#P_Pra2_2(壁 - 乗り越えられない):2
dat_valid_resp <- dat %>%
dplyr::filter(P_Pra1_1 == 1 & P_Pra1_2 == 2 & P_Pra2_1 == 1 & P_Pra2_2 == 2)
#年齢と性別を確認するためだけのデータの作成 ----
dat_age <- dat_valid_resp %>%
dplyr::select(Age)  %>%
summarise(m_age = mean(Age), sd_age = sd(Age), min_age = min(Age), max_age = max(Age))
dat_sex <- dat_valid_resp %>%
dplyr::select(Sex) %>%
group_by(Sex) %>%
summarise(count = n())
#分析用のデータをロング型に整形 ----
dat_valid_long <- dat_valid_resp %>%
dplyr::select(-Sex, -Age, -P_Pra1_1, -P_Pra1_2, -P_Pra2_1, -P_Pra2_2, -ElapsedTime, -Academic) %>%
tidyr::gather(key = Questions, value = Value,
-CWID) %>%
tidyr::separate(col = Questions, into = c("QID", "Condition"), sep="_") %>%
tidyr::separate(col = Condition, into = c("MetSim", "FeatID"), sep="P") %>%
tidyr::drop_na()
######################
#                    #
# 結果をグラフにする #
#                    #
######################
#データの整形：棒グラフ用
#SDは参加者平均から算出
dat_participant_mean <- dat_valid_long %>%
dplyr::group_by(CWID, MetSim) %>%
dplyr::summarise(Average = mean(Value)) %>%
dplyr::mutate(MetSim = as.factor(MetSim))
#棒グラフを書く
dat_participant_graph <- dat_participant_mean %>%
dplyr::group_by(MetSim) %>%
dplyr::summarise(Mean = mean(Average), SD = sd(Average))
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g<-ggplot(dat_participant_graph, aes(y=Mean, x=MetSim)) #irisOderedのデータフレームを使う。y軸とｘ軸の変数を指定。
g <- g + geom_bar(position = "dodge", stat = "identity")#平均値を表したbarの準備
g <- g + geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = .2, position = position_dodge(.9))#標準誤差
g <- g + scale_y_continuous(name = "Mean connotation rating", breaks = seq(0, 5, length=6), limits = c(0, 5))
#2019年6月8日 修正
g <- g + scale_x_discrete(name = "Type of features",
labels = c("S" = "Simile unique features", "M" = "Metaphor unique features"),
limits=c("S", "M"))
plot(g)
#dev.off()
#評定値ごとの度数分布も見る ----
#度数分布用のデータ
dat_valid_long_valfact <- dat_valid_long %>%
dplyr::mutate(Value = as.factor(Value))
head(dat_valid_long_valfact)
str(dat_valid_long_valfact)
#評定値ごとの度数分布も見る ----
#度数分布用のデータ
dat_valid_long_valfact <- dat_valid_long %>%
dplyr::mutate(Value = as.factor(Value),
MetSim = as.factor(MetSim),
FeatID = as.factor(FeatID))
str(dat_valid_long_valfact)
#評定値ごとの度数分布も見る ----
#度数分布用のデータ
dat_valid_long_valfact <- dat_valid_long %>%
dplyr::mutate(Value = as.factor(Value),
MetSim = as.factor(MetSim),
FeatID = as.factor(FeatID)) %>%
dplyr::group_by(MetSim, Value) %>%
dplyr::summarise(count= n())
dat_valid_long_valfact
#度数分布表
g <- ggplot(dat_valid_long_valfact, aes(x = Value, y = Count))
g <- g + geom_histogram(aes(fill = MetSim), position = "identity", alpha=0.5)
# Plot
plot(g)
dat_valid_long_valfact
#度数分布表
g <- ggplot(dat_valid_long_valfact, aes(x = Value, y = count))
g <- g + geom_histogram(aes(fill = MetSim), position = "identity", alpha=0.5)
# Plot
plot(g)
#度数分布表
g <- ggplot(dat_valid_long_valfact, aes(x = Value, y = count))
# Plot
plot(g)
#度数分布表
g <- ggplot(dat_valid_long_valfact)
g <- g + geom_histogram(aes(x = Value, y = count, fill = MetSim), position = "identity", alpha=0.5)
# Plot
plot(g)
#度数分布表
g <- ggplot(dat_valid_long_valfact, aes(x = Value, y = count, fill = MetSim))
g <- g + geom_bar(stat = "identity", position = "dodge")
g <- g + scale_fill_nejm()
#度数分布表
g <- ggplot(dat_valid_long_valfact, aes(x = Value, y = count, fill = MetSim))
g <- g + geom_bar(stat = "identity", position = "dodge")
plot(g)
levels(dat_valid_long_valfact$Value)
#度数分布表
g <- ggplot(dat_valid_long_valfact, aes(x = Value, y = count, fill = MetSim))
g <- g + geom_bar(stat = "identity", position = "dodge")
g <- g + scale_x_discrete(name = "Connotation Rating",
labels = c("1" = "Denotive", "2" = "Slightly denotive", "3" = "Neither denotive nor connotative", "4" = "Slightly connotative", "5" = "Connotative"),
limits=c("1", "2", "3", "4", "5"))
plot(g)
#度数分布表
quartz(type = "pdf", file = "../result/BarPlotConnotationRating_freq_v1.0.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g <- ggplot(dat_valid_long_valfact, aes(x = Value, y = count, fill = MetSim))
g <- g + geom_bar(stat = "identity", position = "dodge")
g <- g + scale_x_discrete(name = "Connotation Rating",
labels = c("1" = "Denotive", "2" = "Slightly denotive", "3" = "Neither denotive nor connotative", "4" = "Slightly connotative", "5" = "Connotative"),
limits=c("1", "2", "3", "4", "5"))
plot(g)
dev.off()
#度数分布表
quartz(type = "pdf", file = "../result/BarPlotConnotationRating_freq_v1.0.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g <- ggplot(dat_valid_long_valfact, aes(x = Value, y = count, fill = MetSim))
g <- g + geom_bar(stat = "identity", position = "dodge")
g <- g + scale_x_discrete(name = "Connotation Rating",
labels = c("1" = "言葉通り", "2" = "Slightly denotive", "3" = "Neither denotive nor connotative", "4" = "Slightly connotative", "5" = "Connotative"),
limits=c("1", "2", "3", "4", "5"))
plot(g)
dev.off()
#度数分布表
quartz(type = "pdf", file = "../result/BarPlotConnotationRating_freq_v1.0.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g <- ggplot(dat_valid_long_valfact, aes(x = Value, y = count, fill = MetSim))
g <- g + geom_bar(stat = "identity", position = "dodge")
g <- g + scale_x_discrete(name = "Connotation Rating",
labels = c("1" = "言葉通り", "2" = "やや\n言葉通り", "3" = "どちらとも\nいえない", "4" = "やや\n比喩的", "5" = "比喩的"),
limits=c("1", "2", "3", "4", "5"))
plot(g)
dev.off()
library(tidyr)
library(dplyr)
library(lme4)
library(lmerTest)
library(ggplot2)
#ローデータの読み込み ----
raw_dat <- read.csv("../data/raw_dat/20240301_MetSimDiff_Study2_20240301_1436.csv")
#必要データの読み込み ----
dat <- raw_dat %>%
dplyr::slice(3:nrow(raw_dat)) %>%#データの読み込み
dplyr::select(Duration..in.seconds., starts_with("D_"), starts_with("P_"), starts_with("Q")) %>%#必要列の抽出
dplyr::select(-P_ID) %>%
dplyr::mutate(ElapsedTime = as.integer(Duration..in.seconds.),
Sex = as.factor(D_Sex),
Age = as.integer(D_Age),
Academic = as.integer(D_AcademicDegree.),
CWID = as.factor(D_CWID.)) %>%
dplyr::select(-Duration..in.seconds., -D_Sex, -D_Age, -D_AcademicDegree., -D_CWID.) %>%
dplyr::mutate_at(.vars = vars(starts_with("Q")), .funs = as.integer) %>%#本番の回答はまとめて
dplyr::mutate_at(.vars = vars(starts_with("P_")), .funs = as.integer)#練習の回答はまとめて
#確認質問に正しく回答している人だけを抽出 -> 9名ドロップ----
#P_Pra1_1(犬 - 吠える): 1
#P_Pra1_2(犬 - 忠実だ): 2
#P_Pra2_1(壁 - 高い): 1
#P_Pra2_2(壁 - 乗り越えられない):2
dat_valid_resp <- dat %>%
dplyr::filter(P_Pra1_1 == 1 & P_Pra1_2 == 2 & P_Pra2_1 == 1 & P_Pra2_2 == 2)
#年齢と性別を確認するためだけのデータの作成 ----
dat_age <- dat_valid_resp %>%
dplyr::select(Age)  %>%
summarise(m_age = mean(Age), sd_age = sd(Age), min_age = min(Age), max_age = max(Age))
dat_sex <- dat_valid_resp %>%
dplyr::select(Sex) %>%
group_by(Sex) %>%
summarise(count = n())
#分析用のデータをロング型に整形 ----
dat_valid_long <- dat_valid_resp %>%
dplyr::select(-Sex, -Age, -P_Pra1_1, -P_Pra1_2, -P_Pra2_1, -P_Pra2_2, -ElapsedTime, -Academic) %>%
tidyr::gather(key = Questions, value = Value,
-CWID) %>%
tidyr::separate(col = Questions, into = c("QID", "Condition"), sep="_") %>%
tidyr::separate(col = Condition, into = c("MetSim", "FeatID"), sep="P") %>%
tidyr::drop_na()
#データの整形：棒グラフ用
#SDは参加者平均から算出
dat_participant_mean <- dat_valid_long %>%
dplyr::group_by(CWID, MetSim) %>%
dplyr::summarise(Average = mean(Value)) %>%
dplyr::mutate(MetSim = as.factor(MetSim))
#棒グラフを書く
dat_participant_graph <- dat_participant_mean %>%
dplyr::group_by(MetSim) %>%
dplyr::summarise(Mean = mean(Average), SD = sd(Average))
#Mr.Unadonを参考にしながら、棒グラフを書く
#https://mrunadon.github.io/ThesisPlot/
#quartz(type = "pdf", file = "../result/BarPlotConnotationRating_v1.0.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g<-ggplot(dat_participant_graph, aes(y=Mean, x=MetSim)) #irisOderedのデータフレームを使う。y軸とｘ軸の変数を指定。
g <- g + geom_bar(position = "dodge", stat = "identity")#平均値を表したbarの準備
g <- g + geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = .2, position = position_dodge(.9))#標準誤差
g <- g + scale_y_continuous(name = "Mean connotation rating", breaks = seq(0, 5, length=6), limits = c(0, 5))
#2019年6月8日 修正
g <- g + scale_x_discrete(name = "Type of features",
labels = c("S" = "Simile unique features", "M" = "Metaphor unique features"),
limits=c("S", "M"))
plot(g)
#ランダム相関を計算しないモデル
#論文で報告するのはこっち
res_lmer_dat <- lmer(formula = Value ~ MetSim + (1 + MetSim|CWID) + (1 + MetSim|QID),
data = dat_valid_long)
summary(res_lmer_dat)
#評定値ごとの度数分布も見る ----
#度数分布用のデータ
dat_valid_long_valfact <- dat_valid_long %>%
dplyr::mutate(Value = as.factor(Value),
MetSim = as.factor(MetSim),
FeatID = as.factor(FeatID)) %>%
dplyr::group_by(MetSim, Value) %>%
dplyr::summarise(count= n())
#度数分布表
quartz(type = "pdf", file = "../result/BarPlotConnotationRating_freq_v1.0.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g <- ggplot(dat_valid_long_valfact, aes(x = Value, y = count, fill = MetSim))
g <- g + geom_bar(stat = "identity", position = "dodge")
g <- g + scale_x_discrete(name = "Connotation Rating",
labels = c("1" = "言葉通り", "2" = "やや\n言葉通り", "3" = "どちらとも\nいえない", "4" = "やや\n比喩的", "5" = "比喩的"),
limits=c("1", "2", "3", "4", "5"))
plot(g)
dev.off()
#度数分布表
#quartz(type = "pdf", file = "../result/BarPlotConnotationRating_freq_v1.0.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g <- ggplot(dat_valid_long_valfact, aes(x = Value, y = count, fill = MetSim))
g <- g + geom_bar(stat = "identity", position = "dodge")
g <- g + scale_x_discrete(name = "Connotation Rating",
labels = c("1" = "言葉通り", "2" = "やや\n言葉通り", "3" = "どちらとも\nいえない", "4" = "やや\n比喩的", "5" = "比喩的"),
limits=c("1", "2", "3", "4", "5"))
plot(g)
#最終更新：2024年3月3日 18時05分
# /Users/Ryunosuke/Dropbox/比喩関連/基盤数/適切さにおける顕著性_その2/code/実験1/調査結果/AptnessJudgementTask_analysis.Rを参考にした
library(tidyr)
library(dplyr)
library(lme4)
library(lmerTest)
library(ggplot2)
# #念の為anovakunも使う
# source("./anovakun_482.txt")
#ローデータの読み込み ----
raw_dat <- read.csv("../data/raw_dat/20240301_MetSimDiff_Study2_20240301_1436.csv")
#必要データの読み込み ----
dat <- raw_dat %>%
dplyr::slice(3:nrow(raw_dat)) %>%#データの読み込み
dplyr::select(Duration..in.seconds., starts_with("D_"), starts_with("P_"), starts_with("Q")) %>%#必要列の抽出
dplyr::select(-P_ID) %>%
dplyr::mutate(ElapsedTime = as.integer(Duration..in.seconds.),
Sex = as.factor(D_Sex),
Age = as.integer(D_Age),
Academic = as.integer(D_AcademicDegree.),
CWID = as.factor(D_CWID.)) %>%
dplyr::select(-Duration..in.seconds., -D_Sex, -D_Age, -D_AcademicDegree., -D_CWID.) %>%
dplyr::mutate_at(.vars = vars(starts_with("Q")), .funs = as.integer) %>%#本番の回答はまとめて
dplyr::mutate_at(.vars = vars(starts_with("P_")), .funs = as.integer)#練習の回答はまとめて
#必要データの読み込み ----
dat <- raw_dat %>%
dplyr::slice(3:nrow(raw_dat)) %>%#データの読み込み
dplyr::select(Duration..in.seconds., starts_with("D_"), starts_with("P_"), starts_with("Q")) %>%#必要列の抽出
dplyr::select(-P_ID) %>%
dplyr::mutate(ElapsedTime = as.integer(Duration..in.seconds.),
Sex = as.factor(D_Sex),
Age = as.integer(D_Age),
Academic = as.integer(D_AcademicDegree.),
CWID = as.factor(D_CWID.)) %>%
dplyr::select(-Duration..in.seconds., -D_Sex, -D_Age, -D_AcademicDegree., -D_CWID.) %>%
dplyr::mutate_at(.vars = vars(starts_with("Q")), .funs = as.integer) %>%#本番の回答はまとめて
dplyr::mutate_at(.vars = vars(starts_with("P_")), .funs = as.integer)#練習の回答はまとめて
#確認質問に正しく回答している人だけを抽出 -> 9名ドロップ----
#P_Pra1_1(犬 - 吠える): 1
#P_Pra1_2(犬 - 忠実だ): 2
#P_Pra2_1(壁 - 高い): 1
#P_Pra2_2(壁 - 乗り越えられない):2
dat_valid_resp <- dat %>%
dplyr::filter(P_Pra1_1 == 1 & P_Pra1_2 == 2 & P_Pra2_1 == 1 & P_Pra2_2 == 2)
#年齢と性別を確認するためだけのデータの作成 ----
dat_age <- dat_valid_resp %>%
dplyr::select(Age)  %>%
summarise(m_age = mean(Age), sd_age = sd(Age), min_age = min(Age), max_age = max(Age))
dat_sex <- dat_valid_resp %>%
dplyr::select(Sex) %>%
group_by(Sex) %>%
summarise(count = n())
dat_age
#必要データの読み込み ----
dat <- raw_dat %>%
dplyr::slice(3:nrow(raw_dat)) %>%#データの読み込み
dplyr::select(Duration..in.seconds., starts_with("D_"), starts_with("P_"), starts_with("Q")) %>%#必要列の抽出
dplyr::select(-P_ID) %>%
dplyr::mutate(ElapsedTime = as.integer(Duration..in.seconds.),
Sex = as.factor(D_Sex),
Age = as.integer(D_Age),
Academic = as.integer(D_AcademicDegree.),
CWID = as.factor(D_CWID.)) %>%
dplyr::select(-Duration..in.seconds., -D_Sex, -D_Age, -D_AcademicDegree., -D_CWID.) %>%
dplyr::mutate_at(.vars = vars(starts_with("Q")), .funs = as.integer) %>%#本番の回答はまとめて
dplyr::mutate_at(.vars = vars(starts_with("P_")), .funs = as.integer)#練習の回答はまとめて
dat_age_all <- dat %>%
dplyr::select(Age)  %>%
summarise(m_age = mean(Age), sd_age = sd(Age), min_age = min(Age), max_age = max(Age))
dat_sex_all <- dat %>%
dplyr::select(Sex) %>%
group_by(Sex) %>%
summarise(count = n())
dat_age_all
dat_sex_all
#確認質問に正しく回答している人だけを抽出 -> 9名ドロップ----
#P_Pra1_1(犬 - 吠える): 1
#P_Pra1_2(犬 - 忠実だ): 2
#P_Pra2_1(壁 - 高い): 1
#P_Pra2_2(壁 - 乗り越えられない):2
dat_valid_resp <- dat %>%
dplyr::filter(P_Pra1_1 == 1 & P_Pra1_2 == 2 & P_Pra2_1 == 1 & P_Pra2_2 == 2)
#年齢と性別を確認するためだけのデータの作成 ----
dat_age <- dat_valid_resp %>%
dplyr::select(Age)  %>%
summarise(m_age = mean(Age), sd_age = sd(Age), min_age = min(Age), max_age = max(Age))
dat_sex <- dat_valid_resp %>%
dplyr::select(Sex) %>%
group_by(Sex) %>%
summarise(count = n())
#分析用のデータをロング型に整形 ----
dat_valid_long <- dat_valid_resp %>%
dplyr::select(-Sex, -Age, -P_Pra1_1, -P_Pra1_2, -P_Pra2_1, -P_Pra2_2, -ElapsedTime, -Academic) %>%
tidyr::gather(key = Questions, value = Value,
-CWID) %>%
tidyr::separate(col = Questions, into = c("QID", "Condition"), sep="_") %>%
tidyr::separate(col = Condition, into = c("MetSim", "FeatID"), sep="P") %>%
tidyr::drop_na()
#データの整形：棒グラフ用
#SDは参加者平均から算出
dat_participant_mean <- dat_valid_long %>%
dplyr::group_by(CWID, MetSim) %>%
dplyr::summarise(Average = mean(Value)) %>%
dplyr::mutate(MetSim = as.factor(MetSim))
#棒グラフを書く
dat_participant_graph <- dat_participant_mean %>%
dplyr::group_by(MetSim) %>%
dplyr::summarise(Mean = mean(Average), SD = sd(Average))
#Mr.Unadonを参考にしながら、棒グラフを書く
#https://mrunadon.github.io/ThesisPlot/
#quartz(type = "pdf", file = "../result/BarPlotConnotationRating_v1.0.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g<-ggplot(dat_participant_graph, aes(y=Mean, x=MetSim)) #irisOderedのデータフレームを使う。y軸とｘ軸の変数を指定。
g <- g + geom_bar(position = "dodge", stat = "identity")#平均値を表したbarの準備
g <- g + geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = .2, position = position_dodge(.9))#標準誤差
g <- g + scale_y_continuous(name = "Mean connotation rating", breaks = seq(0, 5, length=6), limits = c(0, 5))
#2019年6月8日 修正
g <- g + scale_x_discrete(name = "Type of features",
labels = c("S" = "Simile unique features", "M" = "Metaphor unique features"),
limits=c("S", "M"))
plot(g)
library(scales)
#Mr.Unadonを参考にしながら、棒グラフを書く
#https://mrunadon.github.io/ThesisPlot/
#quartz(type = "pdf", file = "../result/BarPlotConnotationRating_v1.0.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g<-ggplot(dat_participant_graph, aes(y=Mean, x=MetSim)) #irisOderedのデータフレームを使う。y軸とｘ軸の変数を指定。
g <- g + geom_bar(position = "dodge", stat = "identity")#平均値を表したbarの準備
g <- g + geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = .2, position = position_dodge(.9))#標準誤差
g <- g + scale_y_continuous(name = "Mean connotativeness rating", breaks = seq(0, 5, length=6), limits = c(1, 5), oob=oob_keep)
#2019年6月8日 修正
g <- g + scale_x_discrete(name = "Type of features",
labels = c("S" = "Simile unique features", "M" = "Metaphor unique features"),
limits=c("S", "M"))
plot(g)
#Mr.Unadonを参考にしながら、棒グラフを書く
#https://mrunadon.github.io/ThesisPlot/
quartz(type = "pdf", file = "../result/BarPlotConnotationRating_v1.1.pdf")
ggplot()+theme_set(theme_classic(base_size = 12,base_family="Hiragino Mincho Pro W3"))
g<-ggplot(dat_participant_graph, aes(y=Mean, x=MetSim)) #irisOderedのデータフレームを使う。y軸とｘ軸の変数を指定。
g <- g + geom_bar(position = "dodge", stat = "identity")#平均値を表したbarの準備
g <- g + geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = .2, position = position_dodge(.9))#標準誤差
g <- g + scale_y_continuous(name = "Mean connotativeness rating", breaks = seq(0, 5, length=6), limits = c(1, 5), oob=oob_keep)
#2019年6月8日 修正
g <- g + scale_x_discrete(name = "Type of features",
labels = c("M" = "Metaphor biased features", "S" = "Simile biased features"),
limits=c("M", "S"))
plot(g)
dev.off()
#ランダム相関を計算しないモデル
#論文で報告するのはこっち
res_lmer_dat <- lmer(formula = Value ~ MetSim + (1 + MetSim|CWID) + (1 + MetSim|QID),
data = dat_valid_long)
summary(res_lmer_dat)
dat_participant_graph
